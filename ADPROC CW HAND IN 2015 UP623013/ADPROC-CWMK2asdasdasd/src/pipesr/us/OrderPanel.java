package pipesr.us;

import java.text.DecimalFormat;
import java.util.ArrayList;

/**
 * This is a class for PipesR'us that is used to create the order panel for the
 * PipesR'us ordering system, The panel gives the user a range of options to
 * choose from when creating a pipe then tells the user if it is possible to
 * make said pipe, The class also returns the cost of the order to the user and
 * allows the user to create multiple orders.
 *
 * @author up623013
 * @author up674771
 * @version 01/12/2015
 */
public class OrderPanel extends javax.swing.JFrame {

    private static double grandTotal;
    private static double orderTotal;
    private static int orderNumber = 1;
    private double lengthInMeters;
    private double diameterInInches;
    private int gradeInput;
    private int finalQuantity;
    private boolean chemical = false;
    private boolean outerReinforcement = false;
    private boolean innerInsulation = false;
    private int colourInput = 0;
    private final ArrayList<Double> prices = new ArrayList<>();
    private final ArrayList<Double> currentOrderTotal = new ArrayList<>();
    private double quote;
    private final DecimalFormat df = new DecimalFormat("#.##");
    private static boolean error = false;
    private static boolean wrongChar = false;

    /**
     * Creates new form OrderPanel
     */
    public OrderPanel() {
        initComponents();
        this.changeStateComboBox();
        chemicalResistanceCheckBox.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        orderPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTextArea = new javax.swing.JTextArea();
        titleLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorTextArea = new javax.swing.JTextArea();
        pipeGradeLabel = new javax.swing.JLabel();
        pipeGradeComboBox = new javax.swing.JComboBox<String>();
        coloursLabel = new javax.swing.JLabel();
        zeroColourRadioButton = new javax.swing.JRadioButton();
        oneColourRadioButton = new javax.swing.JRadioButton();
        twoColourRadioButton = new javax.swing.JRadioButton();
        extrasLabel = new javax.swing.JLabel();
        innerInsulationCheckBox = new javax.swing.JCheckBox();
        outerReinforcementCheckBox = new javax.swing.JCheckBox();
        chemicalResistanceCheckBox = new javax.swing.JCheckBox();
        pipeSizeLabel = new javax.swing.JLabel();
        lengthLabel = new javax.swing.JLabel();
        diameterLabel = new javax.swing.JLabel();
        lengthTextField = new javax.swing.JTextField();
        diameterTextField = new javax.swing.JTextField();
        quantityTextField = new javax.swing.JTextField();
        quntityLabel = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        newOrderButton = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();
        totalPriceLabel = new javax.swing.JLabel();
        currentOrderLabel = new javax.swing.JLabel();
        currentOrderPriceLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        orderPanel.setBackground(new java.awt.Color(240, 236, 236));

        cartTextArea.setEditable(false);
        cartTextArea.setColumns(20);
        cartTextArea.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        cartTextArea.setRows(5);
        cartTextArea.setText("Order number: 1\n------------------------");
        jScrollPane1.setViewportView(cartTextArea);

        titleLabel.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        titleLabel.setText("Welcome to PipesЯ'us! Can we take your order?");

        errorTextArea.setEditable(false);
        errorTextArea.setColumns(20);
        errorTextArea.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        errorTextArea.setRows(5);
        jScrollPane2.setViewportView(errorTextArea);

        pipeGradeLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        pipeGradeLabel.setText("Please enter the plastic grade:");

        pipeGradeComboBox.setBackground(new java.awt.Color(255, 255, 204));
        pipeGradeComboBox.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        pipeGradeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5" }));
        pipeGradeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pipeGradeComboBoxActionPerformed(evt);
            }
        });

        coloursLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        coloursLabel.setText("Colours:");

        buttonGroup1.add(zeroColourRadioButton);
        zeroColourRadioButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        zeroColourRadioButton.setText("0 Colours");
        zeroColourRadioButton.setToolTipText("");
        zeroColourRadioButton.setEnabled(false);
        zeroColourRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroColourRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(oneColourRadioButton);
        oneColourRadioButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        oneColourRadioButton.setText("1 Colour");
        oneColourRadioButton.setEnabled(false);
        oneColourRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneColourRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(twoColourRadioButton);
        twoColourRadioButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        twoColourRadioButton.setText("2 Colours");
        twoColourRadioButton.setEnabled(false);
        twoColourRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoColourRadioButtonActionPerformed(evt);
            }
        });

        extrasLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        extrasLabel.setText("Extras:");

        innerInsulationCheckBox.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        innerInsulationCheckBox.setText("Inner Insulation");
        innerInsulationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                innerInsulationCheckBoxActionPerformed(evt);
            }
        });

        outerReinforcementCheckBox.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        outerReinforcementCheckBox.setText("Outer Reinforcement");

        chemicalResistanceCheckBox.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        chemicalResistanceCheckBox.setText("Chemical Resistance ");
        chemicalResistanceCheckBox.setEnabled(false);

        pipeSizeLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        pipeSizeLabel.setText("Pipe dimensions");

        lengthLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lengthLabel.setText("Length (meters):");

        diameterLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        diameterLabel.setText("Diameter (inches):");

        lengthTextField.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N

        diameterTextField.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N

        quantityTextField.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N

        quntityLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        quntityLabel.setText("Quantity:");

        submitButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        submitButton.setText("Add to cart");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        newOrderButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        newOrderButton.setText("New Order");
        newOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrderButtonActionPerformed(evt);
            }
        });

        checkoutButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        checkoutButton.setText("Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        totalLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        totalLabel.setText("Total Order");

        totalPriceLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        totalPriceLabel.setText("£0:00");

        currentOrderLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        currentOrderLabel.setText("Current Order");

        currentOrderPriceLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        currentOrderPriceLabel.setText("£0:00");

        javax.swing.GroupLayout orderPanelLayout = new javax.swing.GroupLayout(orderPanel);
        orderPanel.setLayout(orderPanelLayout);
        orderPanelLayout.setHorizontalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, orderPanelLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(zeroColourRadioButton)
                                .addGap(136, 136, 136)
                                .addComponent(oneColourRadioButton))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(innerInsulationCheckBox)
                                .addGap(67, 67, 67)
                                .addComponent(outerReinforcementCheckBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                                .addComponent(chemicalResistanceCheckBox)
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createSequentialGroup()
                                .addComponent(twoColourRadioButton)
                                .addGap(76, 76, 76))))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(261, 261, 261)
                                .addComponent(pipeSizeLabel))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(titleLabel))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(292, 292, 292)
                                .addComponent(extrasLabel))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(291, 291, 291)
                                .addComponent(quntityLabel))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(300, 300, 300)
                                .addComponent(pipeGradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(289, 289, 289)
                                .addComponent(coloursLabel))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addComponent(pipeGradeLabel))
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGap(252, 252, 252)
                                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(lengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                        .addComponent(diameterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(lengthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(diameterLabel)
                        .addGap(84, 84, 84)))
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(orderPanelLayout.createSequentialGroup()
                            .addGap(123, 123, 123)
                            .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(orderPanelLayout.createSequentialGroup()
                                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(currentOrderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(currentOrderPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totalLabel)
                                    .addComponent(totalPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(newOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        orderPanelLayout.setVerticalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleLabel)
                        .addGap(19, 19, 19)
                        .addComponent(pipeGradeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pipeGradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(coloursLabel)
                        .addGap(18, 18, 18)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zeroColourRadioButton)
                            .addComponent(oneColourRadioButton)
                            .addComponent(twoColourRadioButton))
                        .addGap(27, 27, 27)
                        .addComponent(extrasLabel)
                        .addGap(18, 18, 18)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(innerInsulationCheckBox)
                            .addComponent(outerReinforcementCheckBox)
                            .addComponent(chemicalResistanceCheckBox))
                        .addGap(52, 52, 52)
                        .addComponent(pipeSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lengthLabel)
                            .addComponent(diameterLabel))
                        .addGap(33, 33, 33)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lengthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diameterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentOrderLabel)
                            .addComponent(totalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))
                    .addGroup(orderPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(quntityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalPriceLabel)
                            .addComponent(currentOrderPriceLabel))
                        .addGap(18, 18, 18)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(orderPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(orderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * An ActionPerformed method to check if the colour option "0 colours" is
     * selected and then restrict or enable the user to select the extra options
     * they want.
     *
     * @param evt used to tell the action listener an action has been performed.
     * on the radio buttons
     */
    private void zeroColourRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroColourRadioButtonActionPerformed
        this.colourOptionInput();
    }//GEN-LAST:event_zeroColourRadioButtonActionPerformed

    /**
     * A method to add an action event to the JComboBox once a value is selected
     * the actions stated below will be performed.
     *
     * @param gradeAction the actions to be preformed once the value in the
     * combo box has been selected.
     */
    private void pipeGradeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pipeGradeComboBoxActionPerformed
        Object inputGrade = pipeGradeComboBox.getSelectedItem();
        gradeInput = Integer.parseInt((String) inputGrade);

        switch (gradeInput) {
            case 0:
                chemicalResistanceCheckBox.setSelected(false);
                this.changeStateComboBox();
                break;

            case 1:
                this.changeStateComboBox();
                zeroColourRadioButton.setEnabled(true);
                break;

            case 2:
                this.changeStateComboBox();
                zeroColourRadioButton.setEnabled(true);
                oneColourRadioButton.setEnabled(true);
                twoColourRadioButton.setEnabled(true);
                break;

            case 3:
                this.changeStateComboBox();
                zeroColourRadioButton.setEnabled(true);
                oneColourRadioButton.setEnabled(true);
                twoColourRadioButton.setEnabled(true);
                break;

            case 4:
                this.changeStateComboBox();
                oneColourRadioButton.setEnabled(true);
                twoColourRadioButton.setEnabled(true);
                break;

            case 5:
                this.changeStateComboBox();
                twoColourRadioButton.setEnabled(true);
                break;
        }
    }//GEN-LAST:event_pipeGradeComboBoxActionPerformed

    /**
     * A method to test if inner Insulation has been selected and if so to
     * enable the outer reinforcement checkbox if the grade selected is 2 or
     * above. also deselects outer reinforcement if inner insulation is not
     * selected.
     *
     * @param evt used to see if an action has been performed on the inner
     * insulation checkbox.
     */
    private void innerInsulationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innerInsulationCheckBoxActionPerformed
        if (gradeInput == 2) {
            outerReinforcementCheckBox.setEnabled(false);
        } else {
            outerReinforcementCheckBox.setEnabled(true);
        }

        if (innerInsulationCheckBox.isSelected() == false) {
            outerReinforcementCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_innerInsulationCheckBoxActionPerformed

    /**
     * Tests all input fields to make sure they are entering numbers, takes in a
     * string and converts it to a double or an int.
     *
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        errorTextArea.setText(null);

        try {
            String stringLength = lengthTextField.getText();
            lengthInMeters = Double.parseDouble(stringLength);

            String stringDiameter = diameterTextField.getText();
            diameterInInches = Double.parseDouble(stringDiameter);

            String quantity = quantityTextField.getText();
            finalQuantity = Integer.parseInt(quantity);

            this.errors();
            if (error == false) {

                /**
                 * Checks which check boxes and radio buttons are selected and
                 * returns true.
                 *
                 */
                chemical = chemicalResistanceCheckBox.isSelected();
                outerReinforcement = outerReinforcementCheckBox.isSelected();
                innerInsulation = innerInsulationCheckBox.isSelected();

                if (zeroColourRadioButton.isSelected()) {
                    colourInput = 0;
                }

                if (oneColourRadioButton.isSelected()) {
                    colourInput = 1;
                }

                if (twoColourRadioButton.isSelected()) {
                    colourInput = 2;
                }

                // Creates pipe, gets the size then returns a quote.
                this.createPipe();
                double sizeOfPipe = this.orderedSize(lengthInMeters, diameterInInches);

                // Prints to the text areas.
                double costOfSelectedPipe = quote * sizeOfPipe;
                cartTextArea.setText(cartTextArea.getText() + "\nPipe price:  " + df.format(costOfSelectedPipe) + "\n");
                cartTextArea.append("\nPipe characteristics:\n" + "- plastic grade: " + gradeInput + "\n- colours: " + colourInput);
                if (chemical) {
                    cartTextArea.append("\n- chemical resistance added");
                }
                if (innerInsulation) {
                    cartTextArea.append("\n- inner insulation added");
                }
                if (outerReinforcement) {
                    cartTextArea.append("\n- outer reinforcement added");
                }
                cartTextArea.append("\nQuantity: " + finalQuantity + "\n");
                double costOfSelectedOrder = costOfSelectedPipe * finalQuantity;
                prices.add(costOfSelectedOrder);
                currentOrderTotal.add(costOfSelectedOrder);
                cartTextArea.append("\nTotal: " + df.format(costOfSelectedOrder) + "\n");
                grandTotal = this.finalTotal();
                orderTotal = this.currentTotal();
                currentOrderPriceLabel.setText("£" + df.format(orderTotal));
                totalPriceLabel.setText("£" + df.format(grandTotal));

            }

        } catch (NumberFormatException e) {
            if (pipeGradeComboBox.getSelectedItem() == "0") {
                errorTextArea.append("\n" + "Please enter the pipe grade you would like");
            } else if (buttonGroup1.getSelection() == null) {
                errorTextArea.append("\n" + "Please select how many colours you would like");
            } else {
                this.wrongCharInput();
                if (wrongChar == true) {
                } else {
                    errorTextArea.append("Please input numeric character only!");
                }
            }
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * An ActionPerformed method to check if the colour option 1 colour is
     * selected and then restrict or enable the user to select the extra options
     * they want.
     *
     * @param evt used to tell the action listener an action has been performed.
     */
    private void oneColourRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneColourRadioButtonActionPerformed
        this.colourOptionInput();
    }//GEN-LAST:event_oneColourRadioButtonActionPerformed

    /**
     * An ActionPerformed method to check if the colour option 2 colour is
     * selected and then restrict or enable the user to select the extra options
     * they want.
     *
     * @param evt used to tell the action listener an action has been performed.
     */
    private void twoColourRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoColourRadioButtonActionPerformed
        this.colourOptionInput();
    }//GEN-LAST:event_twoColourRadioButtonActionPerformed

    /**
     * A method used to reset the cart text area and write new order also also
     * resets current order price.
     *
     * @param evt used to see if an action has occurred on the new order button
     * if so the code is executed.
     */
    private void newOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrderButtonActionPerformed

        if (currentOrderTotal.size() == 0) {
            errorTextArea.append("\nThe cart is empty please order a pipe.");
        } else {
            pipeGradeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"0", "1", "2", "3", "4", "5"}));
            this.changeStateComboBox();
            currentOrderPriceLabel.setText("£0.00");
            orderNumber++;
            cartTextArea.append("\n--------------------------------- \n" + "Order number: " + orderNumber + "\n------------------------");
            currentOrderTotal.clear();
            errorTextArea.setText(null);
            chemicalResistanceCheckBox.setEnabled(false);
        }

    }//GEN-LAST:event_newOrderButtonActionPerformed
    /**
     * A method to end the order and print out to the user the final price of
     * the order/orders they have placed.
     *
     * @param evt used to see if an action has occurred on the new order button
     * if so the code is executed.
     */
    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        pipeGradeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"0", "1", "2", "3", "4", "5"}));
        this.changeStateComboBox();
        currentOrderPriceLabel.setText("£0.00");
        totalPriceLabel.setText("£0.00");
        chemicalResistanceCheckBox.setEnabled(false);
        if (prices.size() == 0) {
            errorTextArea.append("\nYou have no orders! :(");
        } else {
            errorTextArea.setText(cartTextArea.getText());
            errorTextArea.append("\nThank you for your order! Your total cost comes to: " + df.format(grandTotal) + "\n");
            cartTextArea.setText(null);
        }
    }//GEN-LAST:event_checkoutButtonActionPerformed

    /**
     * A method to exceptions that may break the code when the submit button is
     * pressed. if an error is found the correct error is posted to the user.
     * Checks if the size is right.
     */
    private void errors() {
        if (lengthInMeters > 6.0 || lengthInMeters < 0.1) {
            errorTextArea.append("\n" + "Input a length between 0.1m to 6m, please.");
        }
        if (diameterInInches < 1 || diameterInInches > 30) {
            errorTextArea.append("\n" + "Please input a diameter between 1 and 30 inches");
        }
        if (finalQuantity > 300 || finalQuantity < 1) {
            errorTextArea.append("\n" + "Please order at least one pipe, but less than 300");
        }

        error = (lengthInMeters > 6.0 || lengthInMeters < 0.10) || (diameterInInches < 1 || diameterInInches > 30) || (finalQuantity > 300 || (finalQuantity < 1));
    }

    /**
     * A method to exceptions that may break the code when the submit button is
     * pressed. if an error is found the correct error is posted to the user.
     * Checks if there are any wrong characters.
     */
    private void wrongCharInput() {
        if ("".equals(lengthTextField.getText())) {
            errorTextArea.append("\n" + "Input a length between 0.1m to 6m, please.");
        }
        if ("".equals(diameterTextField.getText())) {
            errorTextArea.append("\n" + "Please input a diameter between 1 and 30 inches");
        }
        if ("".equals(quantityTextField.getText())) {
            errorTextArea.append("\n" + "Please order at least one pipe, but less than 300");
        }
        wrongChar = (("".equals(lengthTextField.getText())) || ("".equals(diameterTextField.getText())) || ("".equals(quantityTextField.getText()))) ;        
    }

    /**
     * A method used to determine weather a colour input has been selected then
     * let the user select extras based on the colour they have selected.
     */
    private void colourOptionInput() {
        this.enableInput();
        if (twoColourRadioButton.isSelected()) {
            innerInsulationCheckBox.setEnabled(true);
        } else {
            this.disableCheckBoxes();
        }
    }

    /**
     * A method used to Allow Access to the input fields by the users once one
     * of the radio buttons has been selected.
     */
    public void enableInput() {
        if (buttonGroup1.getSelection() != null) {
            lengthTextField.setEditable(true);
            diameterTextField.setEditable(true);
            quantityTextField.setEditable(true);
        }
    }

    /**
     * A method used to disable inputs of input text fields and to reset them
     * back to default so the user cannot access them and the text from previous
     * use will be wiped.
     */
    public void disableInput() {
        lengthTextField.setEditable(false);
        diameterTextField.setEditable(false);
        quantityTextField.setEditable(false);
        lengthTextField.setText("");
        diameterTextField.setText("");
        quantityTextField.setText("");
    }

    /**
     * A method to disable JCheckBoxes if no JRadioButton is selected.
     */
    private void changeStateComboBox() {
        errorTextArea.setText(null);
        zeroColourRadioButton.setEnabled(false);
        oneColourRadioButton.setEnabled(false);
        twoColourRadioButton.setEnabled(false);
        chemicalResistanceCheckBox.setEnabled(true);
        chemicalResistanceCheckBox.setSelected(false);
        buttonGroup1.clearSelection();
        this.disableCheckBoxes();
        this.disableInput();
    }

    /**
     * A method to set all JCheckBoxes to not be selected and to not be enabled.
     */
    private void disableCheckBoxes() {
        innerInsulationCheckBox.setSelected(false);
        innerInsulationCheckBox.setEnabled(false);
        outerReinforcementCheckBox.setSelected(false);
        outerReinforcementCheckBox.setEnabled(false);
    }

    /**
     * A method to create a Pipe based off user input.
     */
    public void createPipe() {
        if (colourInput == 0) {
            PipeType1 pipe = new PipeType1(gradeInput, chemical);
            quote = pipe.getAQuote();
        } else if (colourInput == 1) {
            PipeType2 pipe = new PipeType2(gradeInput, chemical);
            quote = pipe.getAQuote();
        } else if (colourInput == 2 && innerInsulationCheckBox.isSelected() == false) {
            PipeType3 pipe = new PipeType3(gradeInput, chemical);
            quote = pipe.getAQuote();
        } else if (colourInput == 2 && outerReinforcementCheckBox.isSelected() == true) {
            PipeType5 pipe = new PipeType5(gradeInput, chemical);
            quote = pipe.getAQuote();
        } else {
            PipeType4 pipe = new PipeType4(gradeInput, chemical);
            quote = pipe.getAQuote();
        }
    }

    /**
     * A method to calculate the size of a pipe to find out its cost in cubic
     * inches, does not calculate total cost.
     *
     * @param length takes in the length in meters and converts it to inches.
     * @param diameter takes in the diameter in inches.
     * @return returns the size of the pipe.
     */
    public double orderedSize(double length, double diameter) {
        double lengthInInches = length * 39.37;
        double outerRadius = diameter / 2;
        double innerRadius = outerRadius * 0.9;
        double outerVolume = Math.PI * Math.pow(outerRadius, 2) * lengthInInches;
        double innerVolume = Math.PI * Math.pow(innerRadius, 2) * lengthInInches;
        double pipeSize = outerVolume - innerVolume;
        return pipeSize;
    }

    /**
     * A method to add the pipes in the current order the user is placing.
     *
     * @return returns the current total to a Jlabel for the user to see.
     */
    public double currentTotal() {
        double currentTotal = 0;
        for (Double currentOrderTotal1 : currentOrderTotal) {
            currentTotal += currentOrderTotal1;
        }
        return currentTotal;
    }

    /**
     * A method to add up the final cost of all orders placed by the user.
     *
     * @return returns the final price of all orders to the user.
     */
    public double finalTotal() {
        double finalTotal = 0;
        for (Double price : prices) {
            finalTotal += price;
        }
        return finalTotal;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea cartTextArea;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JCheckBox chemicalResistanceCheckBox;
    private javax.swing.JLabel coloursLabel;
    private javax.swing.JLabel currentOrderLabel;
    private javax.swing.JLabel currentOrderPriceLabel;
    private javax.swing.JLabel diameterLabel;
    private javax.swing.JTextField diameterTextField;
    private javax.swing.JTextArea errorTextArea;
    private javax.swing.JLabel extrasLabel;
    private javax.swing.JCheckBox innerInsulationCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JTextField lengthTextField;
    private javax.swing.JButton newOrderButton;
    private javax.swing.JRadioButton oneColourRadioButton;
    private javax.swing.JPanel orderPanel;
    private javax.swing.JCheckBox outerReinforcementCheckBox;
    private javax.swing.JComboBox<String> pipeGradeComboBox;
    private javax.swing.JLabel pipeGradeLabel;
    private javax.swing.JLabel pipeSizeLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JLabel quntityLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel totalPriceLabel;
    private javax.swing.JRadioButton twoColourRadioButton;
    private javax.swing.JRadioButton zeroColourRadioButton;
    // End of variables declaration//GEN-END:variables
}
